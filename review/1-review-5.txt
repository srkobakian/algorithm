Review of “A Hexagon Tile Map Algorithm for Displaying Spatial Data”

Overview
The hexagon tile map algorithm for the visualization of spatial data using sugarbug is a well-motivated and creative solution to the limitations of more conventional approaches, such as choropleth maps and cartograms. The article presents a clearly up-to-date approach to displaying spatial data and represents an important contribution to the R community. The technology and methods are also useful, as the algorithm appears to be streamlined in its implementation and efficiently automates a complex process of creating hexagon tile maps that would otherwise require more laborious attention to the mapmaker. The substantive contribution is also useful, as the Australian thyroid cancer example illustrates. 

Article
The article is clearly written and does a good job of discussing previous mapping approaches as well as their limitations. The figures were useful in this regard, as they make the textual discussion in the background sections easily understandable even for users less experienced in geography. The flowchart summarizing the algorithm was also useful. I would suggest some minor substantive revisions to improve the substance of the background as well as the clarity of the package’s functionality. First, the discussion of the pros and cons of choropleth maps and various forms of cartograms was good, but I would like more information about the value of hexagons over other shapes. Why not circles or squares or triangles? Hexagons do have advantages, but adding a few more sentences about this would be useful, especially for non-specialist users. Second, other R packages for mapping can be cited, including cartogram (Jeworutzki et al 2020) and tilemaps (McNeill and Hale 2017). Third, I might recommend putting the “implementation” section above the “user choices” section. Fourth, and this is probably a personal preference, the implementation section could be improved by adding a simple table listing the main functions in the package and a brief summary of what they do. This makes the information more easily accessible to the reader. Fifth, the implementation section provides a running example, but please include some sample code directly in the article. This makes the package more accessible to users. It is not necessary to include all code of course, but some of the more important functions that produce a core visualization should be provided directly in the text. 
There were also a few minor typos that should be fixed (e.g., “tyroid” in the caption of Figure 3 and the comma beginning the third line of the second paragraph of the “implementation” section). The last two sentences of the first paragraph of the discussion section are also identical to the next two sentences. Overall, these revisions to the article are relatively minor and manageable.

Package
The package itself seems to be reasonably well-organized, the code is clean, and there is sufficient built-in documentation. The progress bars are also useful. I don’t have any major suggestions for improving the functionality of the package itself, other than the fact that I couldn’t reproduce the example maps in the implementation section because the data were not self-contained. The article says that the example is reproducible using data from the absmapsdata package, but in the provided RMD file the object “fort_aus” can be traced back to the “SIR Downloadable Data.csv” dataset, which is from an external source (and also not available on the github repo). Forgive me if I am missing something here (and it is possible that I am). If not, these SIR data should be embedded or example code fixed to not be dependent on the SIR data so that the illustrative maps are reproducible. 
